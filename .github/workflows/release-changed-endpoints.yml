# This is a basic workflow to help you get started with Actions

name: release-changed-endpoints

# Controls when the workflow will run
on:
  pull_request_target:
    types:
      - closed
    branches:
      - 'release/**'

jobs:
  get_changed_endpoints:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      endpoints: ${{ steps.extract-text.outputs.endpoints }}
    steps:
      - name: Get changed endpoints from PR
        run: |
          echo "PR Description: ${{ github.event.pull_request.body }}"
      - name: Extract Text from PR Description
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        id: extract-text
        run: |
          changed_endpoints=$(echo "$PR_BODY" | awk '/## Changed Endpoints/{p=1; next} p && !/^##/ && NF{print}')
          if [ -n "$changed_endpoints" ]; then
            echo "Changed endpoints are:"
            echo "$changed_endpoints"
            echo "endpoints<<EOF" >> "$GITHUB_OUTPUT"
            echo "$changed_endpoints" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            echo "No changed endpoints"
          fi
        shell: bash
  update_wiki:
    runs-on: ubuntu-latest
    needs: get_changed_endpoints
    if: ${{needs.get_changed_endpoints.outputs.endpoints}} != ""
    steps:
      - name: Checkout wiki
        uses: actions/checkout@v2
        with:
          repository: ${{github.repository}}.wiki
      - name: Create changed endpoints wiki
        id: tagName
        uses: actions/github-script@v6
        with:
          script: |
            const filePrefix = "Changed Endpoints ";
            const endpoints = new Set<string>();

            // Get PR release version label
            const versionRegex = new RegExp('^release\/([0-9]+\.[0-9]+\.[0-9]\+)$');
            const match = `${{ github.event.pull_request.base.ref }}`.match(versionRegex)
            const versionLabel = match[1]
            // Check valid version label
            if (versionLabel) {
              const fs = require('fs')
              const fileName = filePrefix + versionLabel + ".md";
              // If file exists, read from file
              if (fs.existsSync(fileName)) {
                try {
                  const contents = fs.readFileSync(fileName)
                  contents.split(/\r?\n/).forEach(line => {
                    endpoints.add(line);
                    });
                  // remove the file
                  fs.unlinkSync(fileName)                                    
                } catch(err) {
                    core.error("Error while read/delete the file");
                    core.setFailed(err);
                }
              }
              const prChangedPoints = `${{ needs.get_changed_endpoints.outputs.endpoints }}`;
              prChangedPoints.split(/\r?\n/).forEach(line => {
                    endpoints.add(line);
                    });
              // Write changed endpoints to file
              const stream = fs.createWriteStream(fileName);
              endpoints.forEach((endpoint) => {
                stream.write(endpoint + '\n');
              });
              stream.end();

              stream.on('error', (err) => {
                core.error(`Error writing to ${fileName}: ${err}`);
                core.setFailed(err);
              });
            } else {
              core.setFailed('No release version label found')
            }
      - name: Commit wiki to git
        run: |
          git add .
          git config --global user.name 'CI bot'
          git config --global user.email 'paypay-bff@users.noreply.github.com'
          git commit -m "updated releasae wiki"
          git push
